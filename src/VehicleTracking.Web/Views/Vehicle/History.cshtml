@model VehicleTracking.Web.Models.Vehicle
@using VehicleTracking.Web.Services
@using VehicleTracking.Web.Helpers
@{
    ViewData["Title"] = $"History - {Model.VehicleName}";
    var fromDate = ViewBag.From as DateTime? ?? DateTime.Today.AddDays(-7);
    var toDate = ViewBag.To as DateTime? ?? DateTime.Now;
    var locations = ViewBag.Locations as List<VehicleTracking.Web.Models.GpsLocation> ?? new List<VehicleTracking.Web.Models.GpsLocation>();
}


<div class="row mb-3">
    <div class="col-md-12">
        <div class="d-flex justify-content-between align-items-center">
            <h2><i class="fas fa-history me-2"></i>History: @Model.VehicleName</h2>
            <a asp-action="Track" asp-route-id="@Model.Id" class="btn btn-primary">
                <i class="fas fa-crosshairs me-1"></i>Live Tracking
            </a>
        </div>
    </div>
</div>

<!-- Date Range Filter -->
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h6><i class="fas fa-calendar me-2"></i>Filter by Date Range</h6>
            </div>
            <div class="card-body">
                <form method="get" id="historyFilterForm">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="fromDate" class="form-label">From Date</label>
                            <input type="datetime-local" class="form-control" id="fromDate" name="from"
                                   value="@fromDate.ToString("yyyy-MM-ddTHH:mm")" />
                        </div>
                        <div class="col-md-3">
                            <label for="toDate" class="form-label">To Date</label>
                            <input type="datetime-local" class="form-control" id="toDate" name="to"
                                   value="@toDate.ToString("yyyy-MM-ddTHH:mm")" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">&nbsp;</label>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-search me-1"></i>Filter
                                </button>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">&nbsp;</label>
                            <div class="d-grid">
                                <button type="button" class="btn btn-outline-success" onclick="exportHistory()">
                                    <i class="fas fa-download me-1"></i>Export CSV
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Range Buttons -->
                    <div class="row mt-3">
                        <div class="col-md-12">
                            <div class="d-flex flex-wrap gap-2">
                                <button type="button" class="btn btn-outline-info btn-sm" onclick="setQuickRange('today')" title="Ctrl+1">
                                    <i class="fas fa-sun me-1"></i>Today
                                </button>
                                <button type="button" class="btn btn-outline-info btn-sm" onclick="setQuickRange('yesterday')" title="Ctrl+2">
                                    <i class="fas fa-moon me-1"></i>Yesterday
                                </button>
                                <button type="button" class="btn btn-outline-info btn-sm" onclick="setQuickRange('week')" title="Ctrl+3">
                                    <i class="fas fa-calendar-week me-1"></i>Last 7 Days
                                </button>
                                <button type="button" class="btn btn-outline-info btn-sm" onclick="setQuickRange('month')" title="Ctrl+4">
                                    <i class="fas fa-calendar-alt me-1"></i>Last 30 Days
                                </button>
                                <div class="ms-auto">
                                    <small class="text-muted">
                                        <i class="fas fa-keyboard me-1"></i>
                                        Tip: Use Ctrl+1-4 for quick selection
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Current Selection Info -->
                    <div class="row mt-2">
                        <div class="col-md-12">
                            <div class="alert alert-light py-2">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Current selection: <strong>@fromDate.ToString("MMM dd, yyyy HH:mm")</strong> to <strong>@toDate.ToString("MMM dd, yyyy HH:mm")</strong>
                                    (@locations.Count location points)
                                </small>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- History Summary -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="card text-white bg-info">
            <div class="card-body text-center">
                <i class="fas fa-map-marker-alt fa-2x mb-2"></i>
                <h4 id="total-points">@locations.Count</h4>
                <p class="mb-0">Total Points</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-success">
            <div class="card-body text-center">
                <i class="fas fa-route fa-2x mb-2"></i>
                <h4 id="total-distance">0.0 km</h4>
                <p class="mb-0">Distance</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-warning">
            <div class="card-body text-center">
                <i class="fas fa-tachometer-alt fa-2x mb-2"></i>
                <h4 id="avg-speed">0 km/h</h4>
                <p class="mb-0">Avg Speed</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card text-white bg-danger">
            <div class="card-body text-center">
                <i class="fas fa-stopwatch fa-2x mb-2"></i>
                <h4 id="max-speed">0 km/h</h4>
                <p class="mb-0">Max Speed</p>
            </div>
        </div>
    </div>
</div>

<!-- Map and Timeline -->
<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5><i class="fas fa-route me-2"></i>Route History</h5>
                <div class="btn-group" role="group">
                    <button class="btn btn-sm btn-outline-primary" onclick="fitMapToRoute()">
                        <i class="fas fa-expand me-1"></i>Fit Route
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" onclick="toggleAnimation()">
                        <i class="fas fa-play me-1"></i><span id="animation-btn-text">Play</span>
                    </button>
                    <button class="btn btn-sm btn-outline-info" onclick="clearMap()">
                        <i class="fas fa-eraser me-1"></i>Clear
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div id="history-map" style="height: 500px;"></div>
            </div>
        </div>

        <!-- Timeline Control -->
        <div class="card mt-3">
            <div class="card-header">
                <h6><i class="fas fa-clock me-2"></i>Timeline Control</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12 mb-3">
                        <input type="range" class="form-range" id="timelineSlider" min="0" max="100" value="0" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <small class="text-muted">Current Time:</small>
                        <div id="current-time">@fromDate.ToString("MMM dd, yyyy HH:mm")</div>
                    </div>
                    <div class="col-md-4">
                        <small class="text-muted">Speed:</small>
                        <div id="current-speed">0 km/h</div>
                    </div>
                    <div class="col-md-4">
                        <small class="text-muted">Position:</small>
                        <div id="current-position">0, 0</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <!-- Vehicle Info -->
        <div class="card mb-3">
            <div class="card-header">
                <h6><i class="fas fa-car me-2"></i>Vehicle Information</h6>
            </div>
            <div class="card-body">
                <h5>@Model.VehicleName</h5>
                <p class="mb-1"><strong>Device ID:</strong> @Model.DeviceId</p>
                <p class="mb-1"><strong>License:</strong> @(Model.LicensePlate ?? "Not set")</p>
                <p class="mb-1"><strong>Driver:</strong> @(Model.DriverName ?? "Not assigned")</p>
                <p class="mb-1"><strong>Period:</strong> @fromDate.ToString("MMM dd") - @toDate.ToString("MMM dd, yyyy")</p>
            </div>
        </div>

        <!-- Speed Chart -->
        <div class="card mb-3">
            <div class="card-header">
                <h6><i class="fas fa-chart-line me-2"></i>Speed Over Time</h6>
            </div>
            <div class="card-body">
                <canvas id="speedChart" width="400" height="200"></canvas>
            </div>
        </div>

        <!-- Location List -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h6><i class="fas fa-list me-2"></i>Location Points</h6>
                <small class="text-muted">@locations.Count points</small>
            </div>
            <div class="card-body p-0">
                <div id="location-list" style="max-height: 400px; overflow-y: auto;">
                    @if (locations.Any())
                    {
                        @foreach (var location in locations.OrderByDescending(l => l.Timestamp))
                        {
                            <div class="location-item p-2 border-bottom cursor-pointer"
                                 onclick="highlightLocation(@location.Id, @location.Latitude, @location.Longitude)"
                                 data-location-id="@location.Id"
                                 data-lat="@location.Latitude"
                                 data-lng="@location.Longitude"
                                 data-speed="@(location.Speed ?? 0)"
                                 data-time="@location.Timestamp.ToString("yyyy-MM-ddTHH:mm:ss")">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <strong>@location.Timestamp.ToString("HH:mm:ss")</strong>
                                        <br>
                                        <small class="text-muted">@location.Timestamp.ToString("MMM dd, yyyy")</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge @(location.Speed > 0 ? "bg-success" : "bg-secondary")">
                                            @((location.Speed ?? 0).ToString("F0")) km/h
                                        </span>
                                        <br>
                                        <small class="text-muted">@location.Satellites sats</small>
                                    </div>
                                </div>
                                <small class="text-muted">
                                    @location.Latitude.ToString("F6"), @location.Longitude.ToString("F6")
                                </small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="p-3 text-center text-muted">
                            <i class="fas fa-info-circle mb-2"></i>
                            <p>No location data found for the selected period.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Chart.js with date adapter (optional - only if you want charts) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chartjs-adapter-date-fns/2.0.0/chartjs-adapter-date-fns.bundle.min.js"></script>

    <script>
        // Define global variables for JavaScript access
        const vehicleId = @Model.Id;
        const locationsData = @Html.Raw(JsonHelper.SerializeForJavaScript(locations.Select(l => l.ToDto())));
        const vehicleData = @Html.Raw(JsonHelper.SerializeForJavaScript(Model.ToDto()));

        console.log('Vehicle ID:', vehicleId);
        console.log('Locations Data:', locationsData?.length || 0, 'points');

        // Quick date range functions
        function setQuickRange(range) {
            console.log('Setting quick range:', range);

            const now = new Date();
            let from, to = new Date(now);

            switch (range) {
                case 'today':
                    from = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
                    to = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    break;

                case 'yesterday':
                    const yesterday = new Date(now);
                    yesterday.setDate(yesterday.getDate() - 1);
                    from = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 0, 0, 0);
                    to = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59);
                    break;

                case 'week':
                    from = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;

                case 'month':
                    from = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                    break;

                default:
                    console.warn('Unknown range:', range);
                    return;
            }

            // Update form inputs
            const fromInput = document.getElementById('fromDate');
            const toInput = document.getElementById('toDate');

            if (fromInput) fromInput.value = formatDateTimeLocal(from);
            if (toInput) toInput.value = formatDateTimeLocal(to);

            // Submit form
            const form = document.getElementById('historyFilterForm');
            if (form) {
                form.submit();
            }
        }

        // Helper function to format date for datetime-local input
        function formatDateTimeLocal(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');

            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Export history function
        function exportHistory() {
            if (typeof vehicleId === 'undefined') {
                alert('Vehicle ID not available for export');
                return;
            }

            // Get current date range
            const urlParams = new URLSearchParams(window.location.search);
            let from = urlParams.get('from');
            let to = urlParams.get('to');

            // Fallback to form inputs
            if (!from) {
                const fromInput = document.getElementById('fromDate');
                from = fromInput ? fromInput.value : new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString();
            }

            if (!to) {
                const toInput = document.getElementById('toDate');
                to = toInput ? toInput.value : new Date().toISOString();
            }

            const exportUrl = `/Vehicle/ExportHistory/${vehicleId}?from=${encodeURIComponent(from)}&to=${encodeURIComponent(to)}&format=csv`;
            window.open(exportUrl, '_blank');
        }

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing history page...');

            // Initialize history page if function exists
            if (typeof initializeHistoryPage === 'function') {
                initializeHistoryPage();
            } else {
                console.warn('initializeHistoryPage function not found, using fallback');
                initializeFallbackHistory();
            }

            // Add keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey) {
                    switch (e.key) {
                        case '1': e.preventDefault(); setQuickRange('today'); break;
                        case '2': e.preventDefault(); setQuickRange('yesterday'); break;
                        case '3': e.preventDefault(); setQuickRange('week'); break;
                        case '4': e.preventDefault(); setQuickRange('month'); break;
                    }
                }
            });

            // Enhance buttons with loading states
            const quickButtons = document.querySelectorAll('[onclick*="setQuickRange"]');
            quickButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const originalText = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
                    this.disabled = true;

                    setTimeout(() => {
                        this.innerHTML = originalText;
                        this.disabled = false;
                    }, 2000);
                });
            });
        });

        // Fallback history initialization (minimal version)
        function initializeFallbackHistory() {
            console.log('Using fallback history initialization...');

            if (!locationsData || locationsData.length === 0) {
                console.warn('No location data available');
                return;
            }

            // Initialize map
            const mapElement = document.getElementById('history-map');
            if (mapElement) {
                const map = L.map('history-map').setView([39.7392, -104.9903], 10);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                // Create route
                const routePoints = locationsData
                    .filter(loc => loc.latitude && loc.longitude)
                    .map(loc => [parseFloat(loc.latitude), parseFloat(loc.longitude)]);

                if (routePoints.length > 1) {
                    const polyline = L.polyline(routePoints, {
                        color: '#0066ff',
                        weight: 4,
                        opacity: 0.8
                    }).addTo(map);

                    // Fit map to route
                    map.fitBounds(polyline.getBounds(), { padding: [20, 20] });

                    // Add start/end markers
                    L.circleMarker(routePoints[0], {
                        color: 'white', fillColor: 'green', fillOpacity: 1, radius: 8, weight: 2
                    }).addTo(map);

                    L.circleMarker(routePoints[routePoints.length - 1], {
                        color: 'white', fillColor: 'red', fillOpacity: 1, radius: 8, weight: 2
                    }).addTo(map);
                }

                // Setup timeline
                const slider = document.getElementById('timelineSlider');
                if (slider) {
                    slider.max = locationsData.length - 1;
                    slider.addEventListener('input', function(e) {
                        const index = parseInt(e.target.value);
                        const location = locationsData[index];
                        if (location) {
                            // Update info
                            document.getElementById('current-time').textContent = new Date(location.timestamp).toLocaleString();
                            document.getElementById('current-speed').textContent = `${location.speed || 0} km/h`;
                            document.getElementById('current-position').textContent = `${location.latitude?.toFixed(6)}, ${location.longitude?.toFixed(6)}`;

                            // Move map
                            map.setView([location.latitude, location.longitude], Math.max(map.getZoom(), 13));
                        }
                    });
                }

                window.fallbackMap = map;
                console.log('Fallback history initialized successfully');
            }

            // Calculate statistics
            calculateBasicStatistics();
        }

        function calculateBasicStatistics() {
            if (!locationsData || locationsData.length === 0) return;

            const speeds = locationsData.map(loc => loc.speed || 0).filter(s => s > 0);
            const avgSpeed = speeds.length > 0 ? speeds.reduce((a, b) => a + b) / speeds.length : 0;
            const maxSpeed = speeds.length > 0 ? Math.max(...speeds) : 0;

            document.getElementById('avg-speed').textContent = `${avgSpeed.toFixed(0)} km/h`;
            document.getElementById('max-speed').textContent = `${maxSpeed.toFixed(0)} km/h`;

            // Calculate distance
            let totalDistance = 0;
            for (let i = 1; i < locationsData.length; i++) {
                const prev = locationsData[i - 1];
                const curr = locationsData[i];
                if (prev.latitude && prev.longitude && curr.latitude && curr.longitude) {
                    totalDistance += calculateDistance(prev.latitude, prev.longitude, curr.latitude, curr.longitude);
                }
            }
            document.getElementById('total-distance').textContent = `${totalDistance.toFixed(1)} km`;
        }

        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
            return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        }

        // Global functions for button handlers
        function highlightLocation(locationId, lat, lng) {
            console.log('Highlighting location:', locationId, lat, lng);
            if (window.historyManager) {
                window.historyManager.highlightLocation(locationId, lat, lng);
            } else if (window.fallbackMap) {
                window.fallbackMap.setView([lat, lng], 15);
            }
        }

        function fitMapToRoute() {
            if (window.historyManager) {
                window.historyManager.fitMapToRoute();
            } else if (window.fallbackMap && locationsData?.length > 0) {
                const bounds = L.latLngBounds(locationsData.map(loc => [loc.latitude, loc.longitude]));
                window.fallbackMap.fitBounds(bounds, { padding: [20, 20] });
            }
        }

        function toggleAnimation() {
            if (window.historyManager) {
                window.historyManager.toggleAnimation();
            } else {
                // Simple fallback animation
                alert('Animation feature requires the full history manager. Currently using minimal version.');
            }
        }

        function clearMap() {
            if (window.historyManager) {
                window.historyManager.clearMap();
            }
        }

        // CSS for map visibility
        const style = document.createElement('style');
        style.textContent = `
            #history-map {
                height: 500px !important;
                width: 100% !important;
                background-color: #f8f9fa;
                border: 1px solid #dee2e6;
                border-radius: 0.375rem;
            }
            .leaflet-container {
                height: 500px !important;
                border-radius: 0.375rem;
            }
        `;
        document.head.appendChild(style);

        console.log('History page scripts loaded');
    </script>
}